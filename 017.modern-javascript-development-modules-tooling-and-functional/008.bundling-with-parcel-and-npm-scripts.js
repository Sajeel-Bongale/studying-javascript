/*
    Link: https://www.udemy.com/course/the-complete-javascript-course/learn/lecture/22649501#overview

    Parcel is a build tool which is available on NPM.

    We will install parcel to use in a small project that we have created at the root of the folder path in the folder
    called /008.bundling-with-parcel-and-npm-scripts.

    We will initiate the project as an NPM project using npm init command. Then we will install parcel using the
    npm install parcel --save-dev command. This adds parcel as a development dependency which means that it will
    only be available during the build process.

    If we want to run parcel we simply cannot use parcel in the command line like we did with npm. That is because
    parcel is only installed locally. We will need to install it globally. We will have a look at this later.

    There are two other ways to run parcel:
    You can run it using npx and then the command.
    Or you can run it from scripts in the package.json

    We will try running parcel using the npx command. Use the command npx parcel index.html in a terminal with
    the project folder open and you will find that parcel runs correctly. We need to pass index.html as an argument
    which marks the entry point for parcel.

    We will create a small module which we will import in this project. Then we will import the lodash third party
    library in our project using npm. Finally, all of these imports will be bundled by parcel in the final build.

    If you execute the command you will see that parcel sets up a new server on the localhost and also opens the tab
    for you.

    If you find an error when running the npx parcel index.html command it may be due to permissions. Try running it
    with sudo. The other issue you might encounter is version issues. You may need to try to install the version
    mentioned in the video which is 1.12.4.

    Since parcel generates a bundle that is a script and not a module you may be required to remove the type="module"
    attribute key value pair from the index.html (this is true only for v1 of parcel). This is done with the intention
    to make the build work on older browsers still do not support modules. However, scripts work everywhere. Therefore,
    the bundle generated by parcel in v1 does not require the type="module" attribute.

    Since v2 and further parcel now generates bundles that are modules. So if your version of parcel is v2, you need
    to have the type="module" attribute set on the script import.

    After parcel has started we can observe a dist folder has been created in the project directory. This is the
    folder that we will be sending to production.

    If you observe the files in the dist folder, you will find that a new index.html is created and the import
    of the script has changed to the file name that parcel generated(the bundle). This file has all of our code
    assembled together as one single file.

    The resultant dist is only a development dist. As you can see, the code is still readable and all the variable
    and function names have not been mangled. This means that the build parcel has generated is a development build.

    We will see how to make a production build later.

    When we make any change in any module or script file, we observe that the entire page is reloaded. With this
    mechanism it becomes difficult to maintain state across the application as reloads cause us to lose the state.

    To solve this problem, parcel has a feature called Hot Module Replacement or HMR for short. If you activate
    this in your injected module, after making any change in any of the script file, it triggers a rebuild. However,
    it does not cause the page to refresh. It simply replaces only that  part of the module that you changed with
    the new code without triggering a reload.

    To use this we need to add a piece of code to the script file. This piece of code is only understood by parcel and
    is removed when the build is complete.

    Another important advantage that we get when using a module bundler is that we are freed from writing imports with
    relative paths leading into node modules. For example we now don't need to import the lodash library like this:
    import cloneDeep from "./node_modules/lodash-es/cloneDeep.js"
    But we can simply provide the name of the import and package name like so:
    import {cloneDeep} from "lodash-es";

    With this information, parcel or any other module bundler will figure out where to import the module from. This
    technique is not limited to JS libraries. It can be used for all assets like CSS, images, other JS modules, etc.

    As mentioned previously, there is also a second way to run the parcel command, which is by using the npm scripts.
    So npm scripts are basically another way of running a locally installed packages in the command line. They also
    allow us to automate repetitive tasks.

    To create a script, add a new entry to the scripts object in the package.json. The standard script name for
    running a project in development is start. As a value to this script we will use the same command that we used
    previously, but without the npx.

    To run this script open a terminal and type npm run start.

    When we are done with development, it is time to create the final bundle. For this purpose we have another parcel
    script which we will add to the package.json called build. This creates a compressed bundle that is ready
    for production. So now run npm run build and see the output in the dist folder. You may have to remove the
    main property from the package.json file.

    The packages that we have installed so far have been installed locally inside the project. There is an option to
    install them globally using the -g flag so that they are made available system wide. So, packages like
    http-server which enable you to set up a server can be installed globally so that no matter which project folder
    we are in, we can set up a server without the use of an npm script.

    However, most of these tools actually advise developers to always install the tools locally so that they can always
    stay on the latest version.

 */

// NOTE: The files script.js and shoppingCart.js reside in a folder with the same name as this file:
// Specifically in the following location
// 017.modern-javascript-development-modules-tooling-and-functional/008.bundling-with-parcel-and-npm-scripts
