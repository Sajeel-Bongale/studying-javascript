/*
    Link: https://www.udemy.com/course/the-complete-javascript-course/learn/lecture/22648961#overview

    An event is basically a signal that is generated by any DOM node. A signal indicates that something
    has happened. For example a mouse click or movement, etc.

    We can then listen for these events and handle them as per our requirement.

    It is important to remember that even if there is no handler for an event, that event does fire.
    It does not matter if we are listening for it or not.

    We can listen for an event such as mouseenter on the h1 element. -> See example 1

    The mouseenter event is similar to the hover event. It triggers when the mouse enters an element in the DOM.

    Several such events exist in the DOM structure. You can find a reference to all of them in the MDN
    documentation here: https://developer.mozilla.org/en-US/docs/Web/Events

    There is another way in which you can set event listeners on elements. That is by using the onEventName
    property of the DOM Element object. You simply attach the event lister function to this property and
    that's it. -> See example 2

    The second way of listening for events is old school and is not used much. We generally prefer to use the
    addEventListener property along with the callback function attached to it.

    The advantage of using addEventListener is that we can attach as many handlers to the element for a
    particular type of event by writing the addEventListener method those many times.
    This is not the case with onEventName properties as multiple usages of the same will override the
    previous handlers and replace them with the new ones, leaving only the last handler to be active.

    The second advantage is that we can remove an event listener in case we don't need it anymore if
    we have used the addEventListener way of attaching it.

    To remove an event handler we will use the removeEventListener and then call it with the same arguments
    as we did with addEventListener. The additional step that you will need to perform is to extract the
    anonymous callback function into a named callback function.-> See example 3

    There is a third way of adding event listeners to the elements. We can directly add listeners to the
    onEventName attributes in the HTML page. However, this is the old school way of doing it and should
    not be preferred. -> See example 4

 */

const h1 = document.querySelector('h1');

const alertH1 = function (e) {
    alert('addEventListener: Great you are reading the heading');

    // Example 3
    h1.removeEventListener('mouseenter', alertH1);
};

// Example 1
h1.addEventListener('mouseenter', alertH1);

// Example 2
h1.onmouseleave = function (e) {
    console.log('You have left the heading');
};

// Example 4
// We can add <h1 onclick="alert('HTML Alert')"> in the HTML as an event handler
